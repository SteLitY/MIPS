#By David Chen
#This program takes a user input input in the .data section to set the background color, colors of the 4 mini rectangles and square.
#The square is in the center of the screen while the rectangles are at each edge of the square.

.data
frameBuffer:	.space 0x80000 #512 x 256 pixels
m:		.word	0x19	#user input length (default = 10)
n:		.word	0x32 	#user input width (default = 50)
c1r:		.word	0xFF	#color 1 red for the background
c1g:		.word	0xFF	#color 1 green for the background
c1b:		.word	0x00	#color 1 blue for the background
c2r:		.word	0x00	#color 2 red for the square
c2g:		.word	0x00	#color 2 green for the square
c2b:		.word	0xFF	#color 2 blue for the square
c3r:		.word	0xFF	#color 3 red for the rectangle
c3g:		.word	0x00	#color 3 green for the rectangle
c3b:		.word	0x00	#color 3 blue for the rectangle

.text
	la $t1, frameBuffer # load address corresponding to label into register t1
	
#load m and n to a saved variable
	la $s3,m 	#s3 <- address of m
	lw $s3,0($s3) 	#s3 <- m
	la $s4,n	#s4 <- address of n
	lw $s4,0($s4)	#s4 <- n
	

	addi $a3,$a3,0 #initialize a3 to 0. will be used for checks with the label "Square" later

#make m even
	andi $t2,$s3,0x0001 	#clear every bit except the right most bit
	beq $t2, $zero, Done 	#if m is even, skip to done
	addi $s3,$s3,1 		#add 1 to m because it is odd

#make n even
Done:	andi $t2,$s4,0x0001 		#clear every bit except the right most bit
	beq $t2,$zero, CheckBounds 	#if m is even, skip to checkBounds
	addi $s4,$s4,1 			#add 1 to n because it is odd

#make sure m and n are can be drawn inside 512 x 256
CheckBounds:
	#save values of m and n to be used later
	add $a0,$zero,$s3 #save value of s3 m. will be used to reload m later
	add $a1,$zero,$s4 #save value of s4 n. will be used to reload n later
	
	add $t6, $s3,$s3 	#t6 <- m + m
	add $t6, $t6, $s4	#t6 <- (m+m) + n
	
	#check the length, it's not necessary to check the width.
	addi $t5, $zero, 257 	#$t5 gets 256+1 which is the maximum length plus one for the beq checks
	slt $t7,$t6,$t5 	#check if m+m+n < 257 and store in t7
	beq $t7,$zero, Exit	#exit if m+m+n < 257
	beq $zero, $s4, Exit #if N is zero then we exit the program. m can be zero to eliminate rectangles, but if n is zero, there would be no rectangle/squares
	beq $zero, $s3, Exit #Exit if M is zero.
	
EndOfChecks:
#Setting background color
	la $s0,c1r	#load adress of c1r to $s0
	lw $s0,0($s0)	#s0 <- red
	la $s1,c1g	#load adress of c1g to $s1
	lw $s1,0($s1)	#s1 <- green 
	la $s2,c1b 	#load adress of c1b to $s2
	lw $s2,0($s2)	#s2 <- blue

	sll $s0,$s0,16 	#shift red 16 bytes in hex: 0x00 FF 00 00
	sll $s1,$s1,8  	#shift blue 8 bytes in hex: 0x00 00 FF 00
	or $s0,$s0,$s1	#$s0 <- 0x00 FF FF 00, now  $s0 gets yellow
	or $s0,$s0,$s2	#$s0 <- 0x00 FF FF 00 including blue in case the user wants a different color

	addi $t9, $t9, 524288 #$t9 gets 524288 (512 x 256 x 4)
	add $t8, $zero, $zero #reset/initialize $t8 to 0

#set background color
Background: slt $s7, $t9, $t8 	#check to see if t9 is less than t8
	bne $s7, $zero, Rect		#if t9 > t8, go to Square
	sw $s0,0($t1) 			#store green into t1
	addi $t1,$t1,4 			#t1 gets t1 plus the offset, t8
	addi $t8,$t8,4 			#increment t8 by 4 bytes
	j Background			#loop to background
	
#setting the rectangles first	
Rect: la $s0,c2r	#load adress of c2r to $s0
	lw $s0,0($s0)	#$s0 <- c2r
	la $s1,c2g	#load adress of c2g to $s0 
	lw $s1,0($s1)	#$s1 <- c2g
	la $s2,c2b 	#load adress of c2b to $s0
	lw $s2,0($s2)	#$s2 <- c2b

	sll $s0,$s0,16	#shift red 2 bytes 0x00 00 00 00 00
	sll $s1,$s1,8	#shift blue 1 byte 0x00 00 00 FF 00
	or $s0,$s0,$s1	#$s0 <- 0x00 00 FF 00
	or $s0,$s0,$s2	#$s0 <- 0x00 00 FF 00 blue by default or the color that the user inputs
	#s0 is the color that the user input
	
	#t3 is the xmin (512 - n) / 2
	#s4 is the width
	#t4 is the ymin (256 - m) / 2
	#s3 is height/length
	
			
	la $t1, frameBuffer	#load address corresponding to label into register t1. $t1 was previously modified.
	
	#finding x-min for top to down rectangle. height = m+n+m. width = n
	addi $t3,$zero,512	#t3 <- width of the screen
	sub $t3,$t3,$s4		#t3 <- 512 - n
	srl $t3,$t3,1		#t3 <- (512 - n)/2. srl works since n is always even, we will never have a case of losing a 1 on the right
	
	#finding the y-min for top to down rectangle.
	addi $t5,$zero,256	#t5 <- the height of the screen
	add $t4,$s3,$s3 	#t4 <- m+m
	add $s3,$t4,$s4		#s3 <- m+m+n
	sub $t4,$t5,$s3 	#t4 <- 256 - (m+m+n)
	srl $t4,$t4,1 		#t4 <- (256- (m+m+n)) / 2
	
	addi $s6,$zero,3 	#s6 <- 3. used to mark that the second rectangle and square has not been filled yet.
	addi $t8,$zero,1 	#t8 <- 1 used for checking
	
RectStart: 
	#checking infinite loop
	beq $s6, $t8, Square 	#go to Square if second triangle is already done.
	
	#actual rect start
	add $s4,$t3,$s4		#s4 <- move to the right of the rectangle
	add $s3,$t4,$s3 	#s3 <- move to the bottom of the rectangle
	sll $t3,$t3,2 		#multiply x value by 4 to scale for 32 bit pixels
	sll $s4,$s4,2 		#multiply y value by 4 to scale for 32 bit pixels
	sll $t4,$t4,11		#t4 <- 512 x 4 bytes per row
	sll $s3,$s3,11		#s3 <- 512 x 4 bytes per column
	add $s3,$s3,$t1 	#show x value starting address
	add $t0,$t4,$t1 	#show y value starting address
	add $t4,$t0,$t3 	#translate y values to rectangle row starting address
	add $s3,$s3,$t3		#same for x
	add $t0,$t0,$s4		#stop address
	addi $t7,$zero,2048 	#t7 <-2048 
	
RectYloop: add $t5, $t4, $zero 	#start at left edge
	
RectXloop: sw $s0,0($t5)	#store user inputted color inside memory
	addi $t5,$t5,4 		#increment by 4
	bne $t5,$t0,RectXloop	#go to RectXloop if not end of stop address
	
	add $t4,$t4,$t7		#go to next row
	add $t0,$t0,$t7		#move the adress too
	bne $t4,$s3,RectYloop	#loop if not finished
	
	#checks for infinite loop
	addi $s6,$s6,-1 	#mark that one rectangle/square has been finished. 
	beq $t8,$a3, Exit 	#go to exit if loop has been ran 3 times (rect, rect, square)
		
	
#work on second rectangle
	#reload variables
	la $t1, frameBuffer # load address corresponding to label into register t1
	addi $t7,$zero,2048 	#t7 <-2048 
	add $s3,$zero,$a0 #load value of m
	add $s4,$zero,$a1 #load value of n
	
	#notes for myself
	#t3 is the xmin (512 - n) / 2
	#s4 is n+m+m which is the width
	#t4 is the ymin (256 - m) / 2
	#s3 is n which is the height/length
	
	add $s3,$zero,$s4 	#height = n
	
	#finding the y-min for top to down rectangle.
	addi $t3,$zero,256 	#t3 <- the height of the screen
	sub $t4,$t3,$s4 	#t4 <- 256 - n
	srl $t4,$t4,1 		#t4 <- (256- n) / 2
	
	#finding x-min for left to right rectangle. width = m+n+m. width = n
	addi $t3,$zero,512 	#t3 <- width of the screen
	add $s4, $s4, $a0 	#s4 <- n+m
	add $s4, $s4, $a0 	#s4 <- n+m+m
	sub $t3, $t3, $s4 	#t3 <- 512 - (n+m+m)
	srl $t3,$t3,1  		#t3 <- (512-(n+m+n))/2
	
	
	j RectStart		#jump to RectStart with the parameters of the second rectangle
	
	
#setting square in the center of the screen
Square:	la $s0,c3r	#load adress of c3r to $s0
	lw $s0,0($s0)	#$s0 <- c3r
	la $s1,c3g	#load adress of c3g to $s0 
	lw $s1,0($s1)	#$s1 <- c3g
	la $s2,c3b 	#load adress of c3b to $s0
	lw $s2,0($s2)	#$s2 <- c3b

	sll $s0,$s0,16	#shift red 2 bytes
	sll $s1,$s1,8	#shift blue 1 byte
	or $s0,$s0,$s1	#$s0 <- 0x00 FF 00 00
	or $s0,$s0,$s2	#$s0 <- 0x00 FF 00 00 which is red by default or the color that the user inputs
	
	
	la $t1, frameBuffer 	#load address corresponding to label into register t1
	addi $t7,$zero,2048 	#t7 <-2048 
	add $s3,$zero,$a1  	#load previous value of n into s3
	add $s4,$zero,$a1	#load previous value of n into s4
	
	#notes for myself
	#t3 is the xmin (512 - n) / 2
	#s4 is the width
	#t4 is the ymin (256 - m) / 2
	#s3 is height/length
	
	#find x min first
	addi $t3,$zero,512	#$t3 <- 512
	sub $t3,$t3,$s4 	#t3 <- 512-n
	srl $t3,$t3,1 		#t3 <- (512-n)/2
	
	#find y min
	addi $t4, $zero, 256 	#t4 <- 256
	sub $t4,$t4,$s4		#t4 <- 256-n
	srl $t4,$t4,1 		#t4 <- (256-n)/2
	
	addi $a3,$a3,1 		#set a3 to 1
	addi $s6,$s6,-1 	#mark that one loop has been finished. 
	
	j RectStart


Exit:	li $v0,10 		#exit code
	syscall
